{
  "hash": "8c41aa507ffa67cefa00634eb7d12015",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Best Coding Practices\"\nauthor: \"Sebastian DiLorenzo\"\nimage: \"assets/featured.webp\"\nformat: revealjs\n---\n\n\n\n##  {visibility=\"hidden\"}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Learning Outcomes\n\n<br>\n\nAfter this module:\n\n- You will be aware of different coding styles.\n\n. . .\n\n- You will know what styles are good and bad and why.\n\n. . .\n\n- You will think a bit about what is a good name.\n\n. . .\n\n- You will learn about code formatting.\n\n. . .\n\n- You will sample some different notations.\n\n\n## What is Coding Style?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n- Naming conventions --- assigning names to variables\n\n- Code formatting --- placement of braces, use of white space characters etc.\n:::\n\n::: {.column width=\"50%\"}\n\n![[From: [Behind The Lines](http://geekandpoke.typepad.com/geekandpoke/2010/09/behind-the-lines.html) 2010-09-23. By Oliver Widder, Webcomics Geek And Poke.]{.smaller}](assets/coding_style.jpg){.left height=\"600px\"}\n:::\n::::\n\n## Naming Conventions\n\nA syntactically valid name:\n\n- Consists of:\n  - letters: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n  - digits: 0123456789\n  - period: `.`\n  - underscore: `_`\n\n- Begins with a letter or the period (`.`), if `.` should **not** followed by a number\n\n- Cannot be one of the *reserved words*: `if`, `else`, `repeat`, `while`, `function`, `for`, `in`, `next`, `break`, `TRUE`, `FALSE`, `NULL`, `Inf`, `NaN`, `NA`, `NA_integer_`, `NA_real_`, `NA_complex_`, `NA_character_`\n\n- Also cannot be: `c`, `q`, `t`, `C`, `D`, `I` as they are reserved function names.\n\n## Naming Style\n\nVariable names that are legal are not necessarily a good style and they may be dangerous ‚ò†Ô∏è:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF\nT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nF + T\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nF <- 3\nF + T\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\ndo not do this!\n\n. . .\n\nunless you are a politician üï¥...\n\nAvoid `T` and `F` as variable names.\n\n## Customary Variable Names\n\n:::: {.columns}\n::: {.column}\n\nAlso, there is a number of variable names that are traditionally used to name particular variables:\n\n- `usr` &mdash; user\n- `pwd` &mdash; password\n- `x`, `y`, `z` &mdash; vectors\n- `w` &mdash; weights\n- `f`, `g` &mdash; functions\n- `n` &mdash; number of rows\n- `p` &mdash; number of columns\n- `i`, `j`, `k` &mdash; indexes\n- `df` &mdash; data frame\n- `cnt` &mdash; counter\n- `M`, `N`, `W` &mdash; matrices\n- `tmp` &mdash; temporary variables\n\n:::\n\n::: {.column}\n\nSometimes these are domain-specific:\n\n- `p`, `q` &mdash; allele frequencies in genetics,\n- `N`, `k` &mdash; number of trials and number of successes in stats\n\n<br>\n<br>\n[Try to avoid using these for other variables to avoid possible confusion.]{.large}\n\n:::\n:::\n\n## Code formatting\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n**Goal: Improve readability**\n\n<br>\n1. Consistent indentation/whitespace\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 15\n  b <- 20\n  \n  c <- function(a,b){             #Bad\nreturn(a + b)}\n\n      d <- 1+2:3*(4/5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 15\nb <- 20\nc <- function(a, b) {             #Good\n  return(a + b)\n}\nd <- 1 + 2:3 * (4 / 5)\n```\n:::\n\n\n\n:::\n::: {.column width=\"30%\"}\n![https://posit-dev.github.io/air/](assets/air.png){height=\"300px\"}\n\n:::\n::::\n\n## Code formatting\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n**Goal: Improve readability**\n\n<br>\n2. Consistent braces and linewidth\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bad\nfn <- function(a_really_long_variable_name, another_really_long_name) a_really_long_variable_name + another_really_long_name\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nfn <- function(\n  a_really_long_variable_name,\n  another_really_long_name\n) {\n  a_really_long_variable_name + another_really_long_name\n}\n```\n:::\n\n\n\n:::\n::: {.column width=\"30%\"}\n![https://posit-dev.github.io/air/](assets/air.png){height=\"300px\"}\n\n:::\n::::\n\n## Different Notations\n\nPeople use different notation styles throughout their code:\n\n. . .\n\n- `snake_notation_looks_like_this`\n\n. . .\n\n- `camelNotationLooksLikeThis`\n\n. . .\n\n- `period.notation.looks.like.this`\n\n. . .\n\nBut many also use...\n\n. . .\n\n- `LousyNotation_looks.likeThis`\n\n. . .\n\nTry to be consistent and stick to one of them. Bear in mind `period.notation` is used by S3 classes to create generic functions, e.g. `plot.my.object`. A good-enough reason to avoid it?\n\n. . .\n\nIt is also important to maintain code readability by having your variable names:\n\n- informative, e.g. `genotypes` vs. `fsjht45jkhsdf4`\n\n. . .\n\n- Not too long, e.g. `weight` vs. `phenotype.weight.measured`\n\n## Special Variable Names\n\n- There are built-in variable names:\n\n  - `LETTERS`: the 26 upper-case letters of the Roman alphabet\n  - `letters`: the 26 lower-case letters of the Roman alphabet\n  - `month.abb`: the three-letter abbreviations for the English month names\n  - `month.name`: the English names for the months of the year\n  - `pi`: the ratio of the circumference of a circle to its diameter\n\n- Variable names beginning with period are **hidden**: `.my_secret_variable` üëª will not be shown but can be accessed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.the_hidden_answer <- 42\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"F\" \"T\"\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nbut with a bit of effort you can see them:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(all.names = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".main\"               \".QuartoInlineRender\" \".Random.seed\"       \n[4] \".the_hidden_answer\"  \"F\"                   \"T\"                  \n```\n\n\n:::\n:::\n\n\n\n## {background-image=\"/assets/images/cover.webp\"}\n\n::: {.v-center .center}\n::: {}\n\n[Thank you!]{.largest}\n\n[Questions?]{.larger}\n\n[{{< meta current_year >}} ‚Ä¢ [SciLifeLab](https://www.scilifelab.se/) ‚Ä¢ [NBIS](https://nbis.se/) ‚Ä¢ [RaukR](https://nbisweden.github.io/raukr-2025)]{.smaller}\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}