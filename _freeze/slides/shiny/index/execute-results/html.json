{
  "hash": "fdc034ac0fee47b847bc07ec17887202",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interactive web apps with Shiny\"\nauthor: \"Roy Francis\"\nimage: \"assets/featured.webp\"\nformat:\n  revealjs:\n    css: \"assets/styles.css\"\nfilters:\n  - shinylive\nembed-resources: false\n---\n\n\n## {visibility=\"hidden\"}\n\n\n::: {.cell}\n\n:::\n\n\n## Contents {.center}\n\n[\nShiny use cases, App structure, Code execution,  \nUI, Widgets, Dynamic UI,  \nReactivity, Reactive dynamics,  \nError validation, Observers, Reactive values,  \nUpdating widgets, Action buttons,\nDownload, Modules, Debugging,  \nTheming, Deploy,  \nInteractive documents, Extensions  \n]{.large}\n\n## {.center}\n\n[What is Shiny?]{.largest}\n\n[\n[shiny.posit.co/r/gallery/](https://shiny.posit.co/r/gallery/)  \n[shinyapps.org](http://shinyapps.org/)  \n]{.larger}\n\n##\n\n::: {.shiny-gallery-parent}\n\n::: {.shiny-gallery-child}\n![[K-means](https://gallery.shinyapps.io/050-kmeans-example/) [sidebar, simple]{.badge .smaller}](assets/examples/kmeans.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Movie explorer](https://gallery.shinyapps.io/051-movie-explorer/) [sidebar, simple]{.badge .smaller}](assets/examples/movie-explorer.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[freeR](https://committedtotape.shinyapps.io/freeR/) [simple]{.badge .smaller}](assets/examples/freer.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[SuperZip](https://gallery.shinyapps.io/063-superzip-example/) [intermediate, geo]{.badge .smaller}](assets/examples/superzip.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Workout creator](https://parmsam.shinyapps.io/MixThingsUp/) [intermediate]{.badge .smaller} ](assets/examples/workout-generator.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[WildLift](https://abbiodiversity.shinyapps.io/WildLift/) [intermediate, dashboard]{.badge .smaller}](assets/examples/wildlift.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Covid tracker](https://vac-lshtm.shinyapps.io/ncov_tracker/) [intermediate]{.badge .smaller} ](assets/examples/covid-tracker.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Cashflow calc](https://cashflowcalc.com/) [intermediate]{.badge .smaller} ](assets/examples/cashflow-calculator.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Genome browser](https://gallery.shinyapps.io/genome_browser/) [intermediate]{.badge .smaller} ](assets/examples/genome-browser.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Species selection](https://thebeczone.ca/shiny/cciss/) [adv]{.badge .smaller} ](assets/examples/climate-change.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Protein structure](https://niels-van-der-velden.shinyapps.io/shinyNGLVieweR/) [adv, dashboard]{.badge .smaller} ](assets/examples/protein-structure.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Commute explorer](https://nz-stefan.shinyapps.io/commute-explorer-2/) [adv, geo]{.badge .smaller} ](assets/examples/commute-explorer.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Steam explorer](https://eki-anjo.shinyapps.io/steam-shiny/) [adv, dashboard]{.badge .smaller}](assets/examples/steam-explorer.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[System pipe](https://tgirke.shinyapps.io/systemPipeShiny/) [adv, dashboard]{.badge .smaller} ](assets/examples/system-pipe.webp){group=\"shiny-examples\"}\n:::\n\n::: {.shiny-gallery-child}\n![[Shark attack](https://mdubel.shinyapps.io/shark-attack/) [adv]{.badge .smaller} ](assets/examples/shark-attack.webp){group=\"shiny-examples\"}\n:::\n\n:::\n\n## What is shiny?\n\n- Standalone web applications\n- Interactive RMarkdown/Quarto documents\n- Gadgets/RStudio extensions\n- Completely created using R\n- Needs a server (live R environment)\n\n## App organization\n\n**One file format**\n\n\n::: {.cell filename='app.r'}\n\n```{.r .cell-code}\nui <- fluidPage()\nserver <- function(input, output) {}\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n::: {.fragment}\n**Two file format**\n\n\n::: {.cell filename='ui.r'}\n\n```{.r .cell-code}\nui <- fluidPage()\n```\n:::\n\n::: {.cell filename='server.r'}\n\n```{.r .cell-code}\nserver <- function(input, output) {}\n```\n:::\n\n\n:::\n\n## Running the app\n\n- Run `shiny::runApp(\"path/to/folder\")`\n\n. . .\n\n- Use `shinyApp()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(),\n  server = function(input, output) {}\n)\n```\n:::\n\n\n. . .\n\n- Running as a separate process from terminal\n\n```         \nR -e \"shiny::runApp('~/shinyapp')\"\n```\n\n. . .\n\n- From Rmd file using `rmarkdown::run()`\n\n## {.center}\n\n[User Interface (UI)]{.largest}\n\n## UI\n\n```{shinylive-r}\n#| label: ui\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Sidebar Panel\")\n    ),\n    mainPanel(\n      \"hello\"\n    )\n  )\n),\nserver=function(input,output) {})\n```\n\n## Language of the web: HTML, CSS & Javascript\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Hypertext Markup Language (HTML)**\n\n- All UI code is translated to HTML\n- Inspect with browser\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsidebarPanel(helpText(\"Sidebar Panel\"))\n```\n:::\n\n\n```\n<div class=\"col-sm-4\">\n  <form class=\"well\" role=\"complementary\">\n    <span class=\"help-block\">Sidebar Panel</span>\n  </form>\n</div>\n```\n:::\n::: {.column width=\"50%\" .fragment}\n**Cascading style sheet (CSS)**\n\n- Shiny is built on [Bootstrap 3](https://getbootstrap.com/docs/3.3/)\n\n![](assets/ui-nostyle.webp)\n:::\n::::\n\n## \n\n```{shinylive-r}\n#| label: ui-2\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 300\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Title Panel\"),\n    sidebarLayout(\n      sidebarPanel(helpText(\"Sidebar Panel\")),\n      mainPanel(tabsetPanel(\n        tabPanel(\n          \"tab1\",\n          fluidRow(\n            column(6, helpText(\"Col1\")),\n            column(\n              6,\n              helpText(\"Col2\"),\n              fluidRow(\n                column(4, style = \"background-color:#b0c6fb\", helpText(\"Col1\")),\n                column(4, style = \"background-color:#ffa153\", helpText(\"Col2\")),\n                column(4, style = \"background-color:#b1f6c6\", helpText(\"Col3\"))\n              )\n            )\n          )\n        ),\n        tabPanel(\n          \"tab2\",\n          inputPanel(helpText(\"Input Panel\"))\n        ),\n        tabPanel(\n          \"tab3\",\n          wellPanel(helpText(\"Well Panel\"))\n        )\n      ))\n    )\n  ),\n  server = function(input, output) {}\n)\n```\n\n## UI • Widgets • Input\n\n```{shinylive-r}\n#| label: inputs\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\n  ui = fluidPage(\n    fluidRow(\n      column(\n        4,\n        selectInput(\"select-input\",\n          label = \"selectInput\",\n          choices = c(\"A\", \"B\", \"C\")\n        ),\n      )\n    )\n  ),\n  server = function(input, output) {\n  }\n)\n```\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?selectInput\nselectInput(inputId, label, choices,\n  selected = NULL, multiple = FALSE,\n  selectize = TRUE, width = NULL, size = NULL\n)\n```\n:::\n\n\n- Input ID has to be unique\n\n:::\n\n## UI • Widgets • Input\n\n```{shinylive-r}\n#| label: input-widgets\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(4,\n           fileInput(\"file-input\",\"fileInput:\"),\n           selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n           sliderInput(\"slider-input\",label=\"sliderInput\",value=5,min=1,max=10),\n           numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n           textInput(\"text-input\",label=\"textInput\"),\n           textAreaInput(\"text-area-input\",label=\"textAreaInput\"),\n           dateInput(\"date-input\",label=\"dateInput\"),\n           dateRangeInput(\"date-range-input\",label=\"dateRangeInput\"),\n           radioButtons(\"radio-button\",label=\"radioButtons\",choices=c(\"A\",\"B\",\"C\"),inline=T),\n           checkboxInput(\"checkbox\",\"checkboxInput\",value=FALSE),\n           actionButton(\"action-button\",\"Action\"),\n           hr(),\n           submitButton()\n    )\n  )\n),\nserver=function(input,output) {\n})\n\n\n\n```\n\n[[Widgets gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/)]{.smaller}\n\n::: {.notes}\nWidgets are visual objects on a page to allow for data input. Input and output variables.\n:::\n\n## UI • Widgets • Input Functions\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n|Function|Description|\n|---|---|\n|`checkboxInput()`|Checkbox|\n|`checkboxGroupInput()`|Checkbox group|\n|`radioButtons()`|Radio buttons|\n|`dateInput()`|Single date|\n|`dateRangeInput()`|Date range|\n|`fileInput()`|Upload file|\n|`numericInput()`|Input number|\n|`sliderInput()`|Input number|\n:::\n::: {.column width=\"50%\"}\n|Function|Description|\n|---|---|\n|`textInput()`|Single line text input|\n|`textAreaInput()`|Multi-line text input|\n|`passwordInput()`|Password input|\n|`selectInput()`|Dropdown selection|\n|`actionButton()`|Action button|\n|`submitButton()`|Submit button|\n|`tabsetPanel()`|Tabset panel|\n|`navbarPage()`|Page with navbar|\n:::\n::::\n\n[[Widgets gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/)]{.smaller}\n\n## UI • Widgets • Outputs\n\n```{shinylive-r}\n#| label: output\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n           textInput(\"text_input\",label=\"textInput\",value=\"hello world\"),\n           textOutput(\"text_output\")\n    ),\nserver=function(input, output) {\n  output$text_output <- renderText({input$text_input})\n})\n```\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?textOutput\ntextOutput(outputId)\n```\n:::\n\n\n- Output ID has to be unique\n\n:::\n\n## UI • Widgets • Outputs\n\n```{shinylive-r}\n#| label: output-widgets\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(fluidRow(column(5,\n           textInput(\"text_input\",label=\"textInput\",value=\"<h3 style='color:red'>Red text</h3>\"),\n           hr(),\n           htmlOutput(\"html_output\"),\n           textOutput(\"text_output\"),\n           verbatimTextOutput(\"verbatim_text_output\"),\n           tableOutput(\"table_output\"),\n           plotOutput(\"plot_output\",width=\"300px\",height=\"300px\")\n    ))),\n\nserver=function(input, output) {\n  output$html_output <- renderText({input$text_input})\n  output$text_output <- renderText({input$text_input})\n  output$verbatim_text_output <- renderText({input$text_input})\n  output$table_output <- renderTable({iris[1:3,1:3]})\n  output$plot_output <- renderPlot({\n    plot(iris[,1],iris[,2])\n  })\n})\n\n\n\n\n\n```\n\n## UI • Widgets • Output Functions\n\n|Output|Renderer|Description|\n|---|---|---|\n|`textOutput()`|`renderText()`/`renderPrint()`|Standard text|\n|`verbatimTextOutput()`|`renderText()`/`renderPrint()`|Monospaced text|\n|`htmlOutput()`|`renderText()`/`renderPrint()`|HTML text output|\n|`plotOutput()`|`renderPlot()`|Create and display image|\n|`imageOutput()`|`renderImage()`|Display existing image|\n|`tableOutput()`|`renderTable()`|Table output|\n|`uiOutput()`|`renderUI()`|HTML components|\n\n## A complete app\n\n```{shinylive-r}\n#| label: complete-app\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui = fluidPage(\n  h3(\"Temperature Converter\"),\n  numericInput(\"celsius\", \"Degrees Celsius:\", value = 0),\n  textOutput(\"fahrenheit\")\n),\n\nserver = function(input, output) {\n  output$fahrenheit <- renderText({\n    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  })\n})\n```\n\n## Rendering UI\n\n- UI elements are created conditionally using `uiOutput()`/`renderUI()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4,10-16\"}\nshinyApp(\nui=fluidPage(\n  selectInput(\"type\",label=\"Select input type\", choices=c(\"Text\",\"Number\")),\n  uiOutput(\"ui\"),\n  textOutput(\"text_output\"),\n),\n\nserver=function(input, output) {\n  \n output$ui <- renderUI({\n    if(input$type==\"Text\") {\n      textInput(\"input_text\",\"Enter text\")\n    }else{\n      sliderInput(\"input_number\", \"Select number\", value=5, min=1, max=10)\n    }\n  })\n  \n  output$text_output <- renderText({\n    if(input$type==\"Text\") {\n      input$input_text\n    }else{\n      input$input_number\n    }\n  })\n})\n```\n:::\n\n\n- Other options include `conditionalPanel()`, `insertUI()` and `removeUI()`\n\n## Rendering UI\n\n```{shinylive-r}\n#| label: render-ui-1\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui=fluidPage(\n  selectInput(\"type\", label=\"Select input type\", choices=c(\"Text\",\"Number\")),\n  uiOutput(\"ui\"),\n  textOutput(\"text_output\"),\n),\n\nserver=function(input, output) {\n  \n output$ui <- renderUI({\n    if(input$type==\"Text\") {\n      textInput(\"input_text\", \"Enter text\", value=\"hello\")\n    }else{\n      sliderInput(\"input_number\", \"Select number\", value=5, min=1, max=10)\n    }\n  })\n  \n  output$text_output <- renderText({\n    if(input$type==\"Text\") {\n      input$input_text\n    }else{\n      input$input_number\n    }\n  })\n})\n```\n\n## Rendering UI\n\n```{shinylive-r}\n#| label: render-ui-2\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table\"),\n  uiOutput(\"ui\")\n),\n\nserver=function(input, output) {\n  \n  data <- reactive({ get(input$data, 'package:datasets') })\n  \n output$ui <- renderUI({\n  if(input$data==\"iris\") plotOutput(\"plot\",width=\"400px\")\n  })\n  \n  output$plot <- renderPlot({hist(data()[, 1])})\n  output$table <- renderTable({head(data())})\n})\n\n\n\n\n\n\n```\n\n## Rendering UI\n\n```{shinylive-r}\n#| label: render-ui-3\n#| standalone: true\n#| components: [editor, viewer]\n\nshinyApp(\nui=fluidPage(\n  sliderInput(\"persons\",label=\"Select number of persons\", value=1, min=1,max=4),\n  uiOutput(\"ui\")\n),\n\nserver=function(input, output) {\n  output$ui <- renderUI({\n    lapply(1:input$persons, function(i) {\n         div(\n           textInput(paste0(\"name\",i),\"Enter name:\",paste0(\"Person \",i)),\n           textInput(paste0(\"tel\",i),\"Enter phone number:\",value = \"0773921562\"),\n           hr()\n         )\n    })\n  })\n})\n```\n\n## {.center}\n\n[Reactive programming]{.largest}\n\n## Reactivity\n\n- Code doesn't always run line-by-line (Non-linear execution)\n- Code executes when dependencies change\n\n![](assets/reactivity/reactlog.webp){width=\"50%\"}  \n[[reactlog](https://rstudio.github.io/reactlog/index.html)]{.smaller}\n\n## Reactives\n\nFunctions with reactive context\n\n- `reactive()`: Defines an expression\n- `reactiveVal()`: Defines single value\n- `reactiveValues()`: Defines a list of values\n\nRegular function `fn <- function()`: Runs wherever it is is used  \nReactive function `fn <- reactive()`: Runs only when input changes\n\n## Reactive context\n\nReactive values cannot be accessed outside a reactive context\n\n:::: {.columns}\n::: {.column width=\"55%\"}\n```{shinylive-r}\n#| label: reactive-context\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"num\", \"Enter number\",\n                 value = 1),\n    textOutput(\"result\")\n  ),\n  server = function(input, output) {\n    val = input$num^2\n    output$result <- renderText({\n      paste(\"Squared number is:\", val)\n    })\n  }\n)\n```\n:::\n::: {.column width=\"45%\"}\n![](assets/reactive-context-error.webp)\n:::\n::::\n\n## Reactive dynamics\n\n```{shinylive-r}\n#| label: reactive-dynamics-1\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output\")),\n  server=function(input,output) {\n    output$text_output <- renderText({\n        mean(rnorm(input$num_input))\n    })\n  })\n```\n\n:::: {.r-stack}\n::: {.fragment}\n![](assets/reactivity/rg-1/1.webp)\n\n:::\n::: {.fragment}\n\n![](assets/reactivity/rg-1/2.webp)\n\n:::\n::: {.fragment}\n\n![](assets/reactivity/rg-1/3.webp)\n\n:::\n::: {.fragment}\n\n![](assets/reactivity/rg-1/4.webp)\n\n:::\n::::\n\n## Reactive dynamics\n\n```{shinylive-r}\n#| label: reactive-dynamics-2\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")),\n  server=function(input,output) {\n    output$text_output1 <- renderText({\n      mean(rnorm(input$num_input))\n    })\n    output$text_output2 <- renderText({\n      mean(rnorm(input$num_input))\n    })\n  })\n```\n\n:::: {.r-stack}\n::: {.fragment}\n![](assets/reactivity/rg-2/1.webp)\n\n:::\n::: {.fragment}\n\n![](assets/reactivity/rg-2/2.webp)\n\n:::\n::: {.fragment}\n\n![](assets/reactivity/rg-2/3.webp)\n\n:::\n::: {.fragment}\n\n![](assets/reactivity/rg-2/4.webp)\n\n:::\n\n::: {.fragment}\n\n![](assets/reactivity/rg-2/5.webp)\n\n:::\n\n::: {.fragment}\n\n![](assets/reactivity/rg-2/6.webp)\n\n:::\n\n::: {.fragment}\n\n![](assets/reactivity/rg-2/7.webp)\n\n:::\n\n::: {.fragment}\n\n![](assets/reactivity/rg-2/8.webp)\n\n:::\n\n::::\n\n## Reactive dynamics\n\n```{shinylive-r}\n#| label: reactive-dynamics-3\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")),\n  server=function(input,output) {\n    rand <- function(x) rnorm(x)\n    output$text_output1 <- renderText({\n      mean(rand(input$num_input))\n    })\n    output$text_output2 <- renderText({\n      mean(rand(input$num_input))\n    })\n  })\n```\n\n![](assets/reactivity/rg-2/8.webp)\n\n## Reactive dynamics\n\n```{shinylive-r}\n#| label: reactive-dynamics-4\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output1\"), textOutput(\"text_output2\")\n    ),\n  server=function(input,output) {\n    rand <- reactive({ rnorm(input$num_input) })\n    output$text_output1 <- renderText({\n      mean(rand())\n    })\n    output$text_output2 <- renderText({\n      mean(rand())\n    })\n  })\n```\n\n:::: {.r-stack}\n::: {.fragment}\n![](assets/reactivity/rg-3/1.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/2.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/3.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/4.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/5.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/6.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/7.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/8.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/9.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/10.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/11.webp)\n:::\n\n::: {.fragment}\n![](assets/reactivity/rg-3/12.webp)\n:::\n\n::::\n\n::: {.notes}\nReactive functions can be use to share output from a common source. They can be used to reduce computation for demanding functions. Reactive values cannot be accessed from outside the reactive environment.\n\nTry changing the reactive function\n\n`rand <- reactive({ rnorm(input$num_input) })`\n\nto a regular function\n\n`rand <- function(){ rnorm(input$num_input) }`\n\nSaving a reactlog,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reset log\nreactlogReset()\n# run the app and exit\n# save react log as text\ndput(shiny::reactlog(), file = \"assets/reactlog-reactivity-3.txt\")\n# open and visualize\n\"assets/reactlog-reactivity-3.txt\" |>\n  dget() |>\n  reactlog::reactlog_show()\n```\n:::\n\n\n:::\n\n## Error validation\n\n- Shiny returns an error with missing or incorrect values\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  getdata <- reactive({ get(input$data_input,'package:datasets') })\n  output$table_output <- renderTable({head(getdata())})\n})\n```\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/val1.webp)\n:::\n::::\n\n## Error validation\n\n- Errors can be handled in a controlled manner\n\n. . .\n\n- `validate()` can be used to check input\n- `validate()` using `need()`\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"unknown\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  getdata <- reactive({ \n  validate(need(try(input$data_input),\"Please select a data set\"))\n    get(input$data_input,'package:datasets') \n    })\n  output$table_output <- renderTable({head(getdata())})\n})\n```\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/val2.webp)\n:::\n::::\n\n## Error validation\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n- `validate()` using custom function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalfn <- function(x) if(is.null(x) | is.na(x) | x==\"\") return(\"Input data is incorrect.\")\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"unknown\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input,output) {\n  getdata <- reactive({ \n  validate(valfn(try(input$data_input)))\n    get(input$data_input,'package:datasets')\n    })\n  output$table_output <- renderTable({head(getdata())})\n})\n```\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/val3.webp)\n:::\n::::\n\n. . .\n\n- `shiny::req()` checks input variable and silently stops execution\n\n## Observers\n\nReactive functions that automatically re-executes whenever its dependencies change. Usually used for side-effects rather than returning a value.\n\n### `observe()`  \nDoesn't return a value. Constantly runs as long as the app is alive.\n\n### `observeEvent()`\nSimilar to `observe()`, but only re-executes on specific event (like a button click). Doesn't return a value.\n\n### `eventReactive()`\nSimilar to `observeEvent()`, but returns a value.\n\n### `bindEvent()`\nBind an action to a specific event. Similar to `observeEvent()`, but allows for the event to be determined dynamically. Links an input (like a button) to an output and ensures that reactive expressions are only updated when bound event is triggered.\n\n:::{.notes}\nObservers are reactive functions that run when their dependencies change similar to regular reactive output functions,affect HTML output. Observers are used for side-effect.\n:::\n\n## Updating widgets\n\n- Widgets can be updated once initialized\n\n. . .\n\n- Example of a typical UI\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui = fluidPage(\n  selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n  numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n)\n```\n:::\n\n\n. . .\n\n- Add third argument **session** to server function\n- Update functions can be used to update input widgets\n- `observe({})` monitors for a conditional change\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver = function(input,output,session) {\n  observe({\n    if(something) {\n      updateSelectInput(session,\"select-input\",label=\"selectInput\",choices=c(\"D\",\"E\",\"F\"))\n      updateNumericInput(session,\"numeric-input\",label=\"numericInput\",value=10,min=1,max=10)\n    }\n  })}\n```\n:::\n\n\n## Updating widgets\n\n```{shinylive-r}\n#| label: updating-widgets\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"data\", \"Choose a dataset:\", choices = c(\"mtcars\", \"iris\", \"faithful\")),\n    selectInput(\"variable\", \"Choose a variable:\", choices = names(mtcars))\n  ),\n  \n  server = function(input, output, session) {\n    \n    dataset <- reactive({\n      switch(input$data,\n             \"mtcars\" = mtcars,\n             \"iris\" = iris,\n             \"faithful\" = faithful)\n    })\n    \n    observe({\n      updateSelectInput(session,\"variable\",choices=names(dataset()))\n    })\n  }\n)\n```\n\n## Updating widgets\n\n|Input function|Update function|\n|---|---|\n|`checkboxInput()`|`updateCheckboxInput()`|\n|`checkboxGroupInput()`|`updateCheckboxGroupInput()`|\n|`radioButtons()`|`updateRadioButtons()`|\n|`dateInput()`|`updateDateInput()`|\n|`dateRangeInput()`|`updateDateRangeInput()`|\n|`fileInput()`||\n|`numericInput()`|`updateNumericInput()`|\n|`sliderInput()`|`updateSliderInput()`|\n|`textInput()`|`updateTextInput()`|\n|`textAreaInput()`|`updateTextAreaInput()`|\n|`passwordInput()`||\n|`selectInput()`|`updateSelectInput()`|\n|`actionButton()`||\n|`submitButton()`||\n|`tabsetPanel()`|`updateTabsetPanel()`|\n|`navbarPage()`|`updateNavbarPage()`|\n\n## Reactive values\n\n- `reactVal()` `reactValues()`\n- Store reactive values that can be accessed from any reactive context\n\n```{shinylive-r}\n#| label: reactive-values\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\n  ui = fluidPage(\n    actionButton(\"add\",\"Add\"),\n    actionButton(\"subtract\",\"Subtract\"),\n    textOutput(\"counter\")\n  ),\n  server = function(input, output) {\n    reactive_values <- reactiveValues(counter = 0) \n    \n    observeEvent(input$add, {\n      reactive_values$counter <- reactive_values$counter + 1\n    }) \n    observeEvent(input$subtract, {\n      reactive_values$counter <- reactive_values$counter - 1\n    }) \n  \n    output$counter <- renderText({\n      reactive_values$counter\n    })\n  }\n)\n```\n\n## Controlling reactivity using action buttons\n\n```{shinylive-r}\n#| label: buttons\n#| standalone: true\n#| components: [editor, viewer]\nshinyApp(\nui = fluidPage(\n  h3(\"Temperature Converter\"),\n  numericInput(\"celsius\", \"Degrees Celsius:\", value = 0),\n  actionButton(\"btn_go\", \"Go!\"),\n  textOutput(\"fahrenheit\")\n),\n\nserver = function(input, output) {\n\n  \n  output$fahrenheit <- renderText({\n    paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  }) |>\n  bindEvent(input$btn_go)\n  \n  # evr <- eventReactive(input$btn_go, {\n  #   paste(input$celsius, \"°C is \", (input$celsius * 9/5) + 32, \" °F\")\n  # })\n  \n  # output$fahrenheit <- renderText({\n  #   evr()\n  # })\n})\n```\n\n## Download • Data\n\n- Add button and `downloadHandler()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\", choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  downloadButton(\"button_download\",\"Download\")),\nserver=function(input, output) {\n  getdata <- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output <- renderText(paste0(\"Selected dataset: \",input$data_input))\n  \n  output$button_download <- downloadHandler(\n  filename = function() {\n     paste0(input$data_input,\".csv\")\n   },\n  content = function(file) {\n     write.csv(getdata(),file,row.names=FALSE,quote=F)\n   })\n})\n```\n:::\n\n\n- Run in system browser if Rstudio browser doesn't work\n\n## Download • Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  plotOutput(\"plot_output\",width=\"400px\"),\n  downloadButton(\"button_download\", \"Download\")\n),\n\nserver=function(input, output) {\n  getdata <- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output <- renderText(paste0(\"Selected dataset: \",input$data_input))\n  output$plot_output <- renderPlot({hist(getdata()[, 1])})\n  \noutput$button_download <- downloadHandler(\n  filename = function() {\n    paste0(input$data_input,\".png\")\n  },\n  content = function(file) {\n    png(file)\n    hist(getdata()[, 1])\n    dev.off()\n  })\n})\n```\n:::\n\n\n- Run in system browser if Rstudio browser doesn't work\n- See usage of download buttons\n\n## Modules\n\n- Parts of an app can be modularized and reused like mini apps\n- They can be used where needed like functions\n- Modules have their own namespace\n- A module has a UI part and a server part\n- Define namespace using `NS()`\n- Modules can be nested\n\n## Modules\n\n```{shinylive-r}\n#| label: modules\n#| standalone: true\n#| components: [editor, viewer]\ncounter_ui <- function(id) {\n  ns <- NS(id)\n  div(\n    actionButton(ns(\"btn\"), label = \"Counter\"),\n    textOutput(ns(\"txt\"))\n  )\n}\n\ncounter_server <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    count <- reactiveVal(0)\n    output$txt <- renderText({\n      count(count() + 1)\n      paste0(\"Counter \", id, \":\", count())\n    }) |> bindEvent(input$btn)\n  })\n}\n\nshinyApp(\n  ui = fluidPage(\n    counter_ui(id = \"1\"),\n    counter_ui(id = \"2\")\n  ),\n\n  server = function(input, output, session) {\n    counter_server(\"1\")\n    counter_server(\"2\")\n  }\n)\n```\n\n## Debugging & Optimizing\n\n:::{.incremental}\n- `print()` statements\n- Interrupt execution and inspect environment `browser()`\n- Visualize relationships using [**reactlog**](https://rstudio.github.io/reactlog)\n\n  ![](http://rstudio.github.io/reactlog/readme-images/pythagoras.gif)\n\n:::\n\n## Debugging & Optimizing\n\n- Assess compute and RAM usage using [**profvis**](https://profvis.r-lib.org/)\n\n  ![](assets/profvis.webp){width=\"60%\"}\n\n- Simple profiling using **[shiny.tictoc](https://github.com/Appsilon/shiny.tictoc)**\n\n## Code execution\n\n**App launch**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver <- function(input,output) {\n  output$text_output <- renderText({input$text_input})\n}\n```\n:::\n\n\n. . .\n\n**New user**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-4\"}\nui <- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver <- function(input,output) {\n  output$text_output <- renderText({input$text_input})\n}\n```\n:::\n\n\n. . .\n\n**Widget update**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nui <- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver <- function(input,output) {\n  output$text_output <- renderText({input$text_input})\n}\n```\n:::\n\n\n## Theming\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n- Use **shinythemes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shinythemes)\nfluidPage(theme = shinytheme(\"cerulean\"))\n```\n:::\n\n\n- Live theme selector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shinythemes)\nfluidPage(theme = shinythemes::themeSelector())\n```\n:::\n\n\n[[shinythemes](https://rstudio.github.io/shinythemes/)]{.smaller}\n\n:::\n::: {.column width=\"60%\"}\n```{shinylive-r}\n#| label: shinythemes\n#| standalone: true\n#| viewerHeight: 650\nwebr::install(\"shinythemes\")\n\nshinyApp(\n  ui = fluidPage(\n    shinythemes::themeSelector(),\n    sidebarPanel(\n      textInput(\"txt\", \"Text input:\", \"text here\"),\n      sliderInput(\"slider\", \"Slider input:\", 1, 100, 30),\n      actionButton(\"action\", \"Button\"),\n      actionButton(\"action2\", \"Button2\", class = \"btn-primary\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Tab 1\"),\n        tabPanel(\"Tab 2\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)\n```\n:::\n::::\n\n## Theming\n\n- Use **bslib**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bslib)\nui <- page_fluid(\n  theme = bs_theme(version = 5)\n)\n```\n:::\n\n\n- Live theme selector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bslib)\nbs_theme_preview()\n```\n:::\n\n\n[[bslib](https://rstudio.github.io/bslib/), [Bootswatch](https://bootswatch.com/)]{.smaller}\n\n## Theming using custom CSS\n\n- Insert in the head\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n      h2 {\n        font-family: 'Yusei Magic', sans-serif;\n      }\"))\n  ))\n```\n:::\n\n\n- Add styles directly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(h2(\"Old Faithful Geyser Data\", style = \"font-size: 2em;\"))\n```\n:::\n\n\n- Load custom CSS file placed in `www/`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\"))\n)\n```\n:::\n\n\n[[CSS styling](https://shiny.posit.co/r/articles/build/css/)]{.smaller}\n\n## Deployment\n\n- R scripts\n  - GitHub\n  - R Package\n\n. . .\n\n- Container (Docker ...)\n\n. . .\n\n- Hosting\n  - Shinyapps.io\n  - Shiny Server (Free)\n  - Shiny Server Pro\n\n. . .\n\n- Automatically deploying to shinyapps.io\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rsconnect)\nrsconnect::setAccountInfo(name=\"username\", token=\"HDFGT46YF7TDT6474G47\", secret=\"hdgTDF5FStgdkpJ\")\ndeployApp(appName=\"name\")\n```\n:::\n\n\n. . .\n\n[[Shiny apps user guide](https://docs.rstudio.com/shinyapps.io/index.html), [Shiny server guide](https://docs.rstudio.com/shiny-server/)]{.smaller}\n\n## Interactive documents • Quarto\n\n````\n---\ntitle: \"Interactive scatterplot\"\nformat: html\nserver: shiny\n---\n\n```{{r}}\nlibrary(shiny)\nlibrary(ggplot2)\n\nselectInput(\"x_var\", \"X-axis Variable:\", choices=names(mtcars), selected = \"hp\"),\nselectInput(\"y_var\", \"Y-axis Variable:\", choices=names(mtcars), selected = \"mpg\"),\nplotOutput(\"plot\")\n```\n\n```{{r}}\n#| context: server\noutput$plot <- renderPlot({\n  ggplot(mtcars, aes_string(x = input$x_var, y = input$y_var)) +\n    geom_point() +\n    labs(title = \"Interactive mtcars scatterplot\", \n         x = input$x_var, \n         y = input$y_var)\n})\n```\n````\n\n## Interactive documents • Rmarkdown\n\n- Shiny can run in RMarkdown documents. Set YAML `runtime: shiny`.  \n\n````        \n---\ntitle: Interactive document\noutput: html_document\nruntime: shiny\n---\n````\n\n- Shiny widgets can be included directly  \n\n````\n```{{r}}\nselectInput('n_breaks',label='Number of bins:',choices=c(10,20,35,50),selected=20)\n```\n````\n\n## Interactive documents\n\n- Whole shiny apps can be included directly  \n\n````\n```{{r}}\nshinyApp(\n  ui=fluidPage(),\n  server=function(input,output) {}\n)\n```\n````\n\n- Hosted shiny apps can be embedded using `<iframe>`  \n\n```         \n<iframe src=\"https://user.shinyapps.io/app\"></iframe>\n```\n\n## Other topics\n\n- [Extended task](https://rstudio.github.io/shiny/reference/ExtendedTask.html)\n- [Shiny unit tests](https://shiny.posit.co/r/articles/improve/testing-overview/)\n- [Applications of action buttons](https://shiny.posit.co/r/articles/build/action-buttons/)  \n- [Progress indicators](https://shiny.posit.co/r/articles/build/progress/)  \n- [Shinylive](https://shinylive.io)\n- [ShinyUIEditor](https://rstudio.github.io/shinyuieditor/)\n- ...\n\n## Extensions\n\n- [Naxstats](https://github.com/nanxstats/awesome-shiny-extensions): Repo collection of shiny extensions\n- [bslib](https://rstudio.github.io/bslib): Bootswatch themes for shiny\n- shinyurl: using URLs to recreate state of an app\n- shinypod: Reusable modules\n- [shinyjs](https://deanattali.com/shinyjs/): Custom javascript functionality\n- [shinyWidgets](https://github.com/dreamRs/shinyWidgets): Bootstrap 3 custom widgets\n- [shinyBS](https://github.com/ebailey78/shinyBS): Bootstrap 3 widgets\n- [shinymanager](https://datastorm-open.github.io/shinymanager/): Authentication for shiny apps\n- ...\n\n## Learning & community\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Documentation**\n\n- [Posit Shiny home](https://shiny.posit.co/) \n- [Posit Shiny articles](https://shiny.posit.co/r/articles/)\n\n**Books**\n\n![](assets/mastering-shiny.webp){height=\"250px\"} ![](https://engineering-shiny.org/img/engineering-shiny.jpeg){height=\"250px\"}\n\n- [Mastering Shiny Book](https://mastering-shiny.org/index.html)\n- [Engineering Shiny Apps](https://engineering-shiny.org/index.html)\n- [Shiny Interfaces](https://unleash-shiny.rinterface.com/index.html)\n- [Mastering shiny solutions](https://mastering-shiny-solutions.org/)\n:::\n::: {.column width=\"50%\"}\n**Conferences**\n\n- [Appsilon: ShinyConf](https://www.shinyconf.com/)\n- [Jumping Rivers: Shiny in Production](https://shiny-in-production.jumpingrivers.com/)\n\n**Blogs & Podcasts**\n\n- [Posit Shiny Blog](https://shiny.posit.co/blog/)\n- [Shiny Developer Series](https://shinydevseries.com/)\n:::\n::::\n\n## {background-image=\"/assets/images/cover.webp\"}\n\n::: {.v-center .center}\n::: {}\n\n[Thank you!]{.largest}\n\n[Questions?]{.larger}\n\n[{{< meta current_year >}} • [SciLifeLab](https://www.scilifelab.se/) • [NBIS](https://nbis.se/) • [RaukR](https://nbisweden.github.io/raukr-2025)]{.smaller}\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}