{
  "hash": "382b8bc62b95949641a9b585ee39089e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Renv: Project environments in R\"\nauthor: \"Roy Francis\"\nimage: \"assets/featured.webp\"\nformat: revealjs\n---\n\n\n\n\n## Packages {visibility=\"hidden\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Terminology\n\n**R package**  \n\n- A standardized collection of R code, data or documentation\n- How you use someone else's code\n- `installed.packages()`\n\n. . .\n\n**R library**  \n\n- A directory that holds R packages\n- Where you store packages\n- `.libPaths()`\n\n. . .\n\n**R repository**  \n\n- A server that hosts R packages for distribution\n- Where you get packages from\n- `getOption(\"repos\")`\n\n## Motivation\n\n::: {.columns}\n::: {.column width=\"70%\"}\n::: {.fragment}\n\nUnable to reproduce the same results when\n\n- Rerunning old code\n- Sharing your code with others\n\n:::\n::: {.fragment}\n\n**Can you answer these questions about your project?**\n\n- Where did I get my package from? What's my **repository**?\n- Where is my package stored? Where is my **package library**?\n- What **version** of the package did I use?\n\n:::\n::: {.fragment}\n\n[`renv` is a toolkit to manage project-specific libraries of R packages]{.large}\n\n:::\n:::\n::: {.column width=\"30%\"}\n::: {.fragment}\n\n![](assets/renv.png)\n\n:::\n:::\n:::\n\n## What can renv do?\n\n**Isolate projects**  \n\n- Each project gets it's own **library**\n- You can use different versions of a library in different projects\n\n. . .\n\n**Reproducible**  \n\n- Record exact **version** of each package\n\n. . .\n\n**Portable**\n\n- You or others can restore the project libraries with the same exact versions\n- And from the same **repository** as you did\n\n## renv workflow\n\n::: {.columns}\n::: {.column width=\"40%\"}\n\n1. Initialize  \n`renv::init()`\n\n2. Write code install packages  \n`install.packages()`\n\n3. Record environment  \n`renv::snapshot()`\n\n4. Repeat 2 & 3\n5. Restore environment if needed  \n`renv::restore()`\n\n:::\n::: {.column width=\"60%\"}\n\n![](assets/overview.png)\n\n:::\n:::\n\n## Initialize\n\n```\n> renv::init()\n\nrenv: Project Environments for R\n\nWelcome to renv! It looks like this is your first time using renv.\nThis is a one-time message, briefly describing some of renv's functionality.\n\nrenv will write to files within the active project folder, including:\n\n  - A folder 'renv' in the project directory, and\n  - A lockfile called 'renv.lock' in the project directory.\n\nIn particular, projects using renv will normally use a private, per-project\nR library, in which new packages will be installed. This project library is\nisolated from other R libraries on your system.\n\nIn addition, renv will update files within your project directory, including:\n\n  - .gitignore\n  - .Rbuildignore\n  - .Rprofile\n\nFinally, renv maintains a local cache of data on the filesystem, located at:\n\n  - \"~/Library/Caches/org.R-project.R/R/renv\"\n\nThis path can be customized: please see the documentation in `?renv::paths`.\n\nPlease read the introduction vignette with `vignette(\"renv\")` for more information.\nYou can browse the package documentation online at https://rstudio.github.io/renv/.\nDo you want to proceed? [y/N]: y\n\n- \"~/Library/Caches/org.R-project.R/R/renv\" has been created.\n- Linking packages into the project library ... [32/32] Done!\nThe following package(s) will be updated in the lockfile:\n\n# CRAN -----------------------------------------------------------------------\n- R6            [* -> 2.5.1]\n- base64enc     [* -> 0.1-3]\n- bslib         [* -> 0.6.1]\n- cachem        [* -> 1.0.8]\n- fastmap       [* -> 1.1.1]\n- rmarkdown     [* -> 2.25]\n- sass          [* -> 0.4.8]\n- vctrs         [* -> 0.6.5]\n- xfun          [* -> 0.41]\n- yaml          [* -> 2.3.8]\n\nThe version of R recorded in the lockfile will be updated:\n- R             [* -> 4.3.2]\n\n- Lockfile written to \"~/Downloads/test/renv.lock\".\n- renv activated -- please restart the R session.\n```\n\n## Status\n\nWhat has changed in my project compared to the previous record?\n\n```\n> renv::status()\nThe following package(s) are missing:\n\n package installed recorded used\n dplyr   n         n        y\n ggplot2 n         n        y\n shiny   n         n        y\n\nSee ?renv::status() for advice on resolving these issues.\n```\n\n## Snapshot\n\n::: {.panel-tabset}\n\n## Before installing packages\n\n```\n> renv::snapshot()\nThe following required packages are not installed:\n- dplyr\n- ggplot2\n- shiny\nPackages must first be installed before renv can snapshot them.\nUse `renv::dependencies()` to see where this package is used in your project.\n\nWhat do you want to do?\n\n1: Snapshot, just using the currently installed packages.\n2: Install the packages, then snapshot.\n3: Cancel, and resolve the situation on your own.\n```\n\n## After installing packages\n\n```\n> renv::snapshot()\nThe following package(s) will be updated in the lockfile:\n\n# RSPM -----------------------------------------------------------------------\n- dplyr        [* -> 1.1.4]\n- fansi        [* -> 1.0.6]\n- generics     [* -> 0.1.3]\n- tidyselect   [* -> 1.2.0]\n- utf8         [* -> 1.2.4]\n- withr        [* -> 3.0.0]\n\nDo you want to proceed? [Y/n]:\n```\n\n:::\n\n## renv workflow\n\n![](assets/lockfile_snapshot.png)\n\n```\n# record current state of packages\nrenv::snapshot()\n```\n\n## renv.lock anatomy {auto-animate=\"true\"}\n\n```json\n{\n  \"R\": {\n    \"Version\": \"4.3.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://p3m.dev/cran/latest\"\n      }\n    ]\n  },\n  \"Bioconductor\": {\n    \"Version\": \"3.18\"\n  },\n  \"remotes\": {\n    \"Package\": \"remotes\",\n    \"Version\": \"2.4.2.1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"RSPM\",\n    \"Requirements\": [\n      \"R\",\n      \"methods\",\n      \"stats\",\n      \"tools\",\n      \"utils\"\n    ],\n    \"Hash\": \"63d15047eb239f95160112bcadc4fcb9\"\n  }\n}\n```\n\n## renv.lock anatomy • R version {auto-animate=\"true\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## renv.lock anatomy • Active repositories {auto-animate=\"true\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## renv.lock anatomy • R packages {auto-animate=\"true\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Package metadata\n\n::: {.columns}\n::: {.column width=\"60%\"}\n\n```json\n\"remotes\": {\n  \"Package\": \"remotes\",\n  \"Version\": \"2.4.2.1\",\n  \"Source\": \"Repository\",\n  \"Repository\": \"RSPM\",\n  \"Requirements\": [\n    \"R\",\n    \"methods\",\n    \"stats\",\n    \"tools\",\n    \"utils\"\n  ],\n  \"Hash\": \"63d15047eb239f95160112bcadc4fcb9\"\n}\n```\n\n:::\n::: {.column width=\"40%\"}\n\n- **Package**: Package name\n- **Version**: Package version\n- **Source**: Source location\n- **Repository**: Name of repository\n- **Hash**: Unique hash for this package\n\n:::\n:::\n\n## Practical use cases for lockfile\n\n- Time capsules: Freeze exact versions of packages for future\n- Collaborate using the same library\n- Deploy development environment to a remote server\n\n## Restoring library\n\n::: {.columns}\n::: {.column}\n\n```\n> renv::restore()\nThe following package(s) will be updated:\n\n# CRAN -----------------------------------------------------------------------\n- R6            [* -> 2.5.1]\n- fontawesome   [* -> 0.5.2]\n- xfun          [* -> 0.41]\n- yaml          [* -> 2.3.8]\n\n# RSPM -----------------------------------------------------------------------\n- dplyr         [* -> 1.1.4]\n- fansi         [* -> 1.0.6]\n- withr         [* -> 3.0.0]\n\nDo you want to proceed? [Y/n]:\n```\n\n:::\n::: {.column}\n::: {.fragment}\n\n- `renv::restore()`\n- Rebuild a project library from a lockfile \n- Handles multiple sources\n  - CRAN\n  - Bioconductor\n  - GitHub\n  - Gitlab\n  - Bitbucket\n  - Private repositories...\n- Will not modify R version\n\n:::\n:::\n:::\n\n## Tracking renv.lock\n\n![](assets/lockfile_tracking.png)\n\n```\n# view lockfile history\nrenv::history()\n\n# revert to previous state\nrenv::revert(commit=\"commit 2\")\n```\n\n## How renv works\n\n**Without renv**\n\n::: {.columns}\n::: {.column width=\"40%\"}\n\n![](assets/structure_sys-lib.png)\n\n:::\n::: {.column width=\"60%\"}\n\n- All projects share the same library\n- Changes in one project affects the other\n\n:::\n:::\n\n## How renv works\n\n**Project specific library without global cache**\n\n::: {.columns}\n::: {.column width=\"40%\"}\n\n![](assets/structure_no-global-cache.png)\n\n:::\n::: {.column width=\"60%\"}\n\n- Each project has it's own library\n- `renv::settings$use.cache(FALSE)` disables global cache\n\n:::\n:::\n\n## How renv works\n\n**Project specific library with global cache**\n\n::: {.columns}\n::: {.column width=\"40%\"}\n\n![](assets/structure_global-cache.png)\n\n:::\n::: {.column width=\"60%\"}\n\n- Each project has it's own library\n- Projects libraries are soft-linked to global cache\n\n::: {.fragment}\n\n|OS|Location|\n|---|---|\n|Linux|~/.local/share/env|\n|MacOS|~/Library/Application Support/renv|\n|Windows|%LOCALAPPDATA%/renv|\n\n`RENV_PATHS_CACHE` Set this environment variable to share package cache across multiple users\n\n:::\n:::\n:::\n\n## Project profiles\n\n- Switch between different profiles\n- By default, the \"default\" profile is used\n- Create or switch profiles\n\n`renv::activate(profile = \"dev\")`\n\n## Install packages using renv\n\n```\n> renv::install(c(\"dplyr\"))\n# Downloading packages -------------------------------------------------------\n- Downloading dplyr from CRAN ...               OK [file is up to date]\n- Downloading generics from CRAN ...            OK [file is up to date]\n- Downloading pillar from CRAN ...              OK [file is up to date]\n- Downloading fansi from CRAN ...               OK [file is up to date]\n- Downloading utf8 from CRAN ...                OK [file is up to date]\n- Downloading tibble from CRAN ...              OK [file is up to date]\n- Downloading pkgconfig from CRAN ...           OK [file is up to date]\n- Downloading tidyselect from CRAN ...          OK [file is up to date]\n- Downloading withr from CRAN ...               OK [file is up to date]\nSuccessfully downloaded 9 packages in 5.8 seconds.\n\nThe following package(s) will be installed:\n- dplyr      [1.1.4]\n- fansi      [1.0.6]\n- generics   [0.1.3]\n- pillar     [1.9.0]\n- pkgconfig  [2.0.3]\n- tibble     [3.2.1]\n- tidyselect [1.2.0]\n- utf8       [1.2.4]\n- withr      [3.0.0]\nThese packages will be installed into \"~/Downloads/test/renv/library/R-4.3/x86_64-apple-darwin13.4.0\".\n\nDo you want to proceed? [Y/n]:\n```\n\n## Tidbits\n\n- Implicit snapshotting\n  - Only packages which appear to be used in the project is recorded\n  - `renv::snapshot()`\n\n. . .\n\n- Snapshot all packages in current library regardless of project\n  - `renv::snapshot(type=\"all\")`\n\n. . .\n\n- Discover dependencies manually\n  - `renv::dependencies()`\n\n. . .\n\n- Explicit snapshotting\n  - Only record packages specified in DESCRIPTION file\n  - `renv::settings$snapshot.type(\"explicit\")`\n\n. . .\n\n- Ignore a package explicitly  \n  - `renv::settings$ignored.packages(\"<package>\")`\n\n## Tidbits\n\n- Restore into system library  \n  - `renv::restore()`\n\n. . .\n\n- Disable global cache\n  - `renv::settings$use.cache(FALSE)`\n\n. . .\n\n- Install to global cache\n  - `renv::install()`\n\n. . .\n\n- Update packges to newer versions\n  - `renv::update()`\n\n. . .\n\n- renv is integrated into RStudio projects (.Rproj)\n\n. . .\n\n- Disable renv\n  - Temporary deactivate renv\n    - `renv::deactivate()`\n    - `renv::activate()`\n  - Remove renv from current project (removes renv/, renv.lockfile, .Rprofile)\n    - `renv::deactivate(clean=TRUE)`\n  - Remove renv global cache\n    - `unlink(renv::paths$root(), recursive=TRUE)`\n\n## Renv is only one piece of the reproducibility puzzle\n\n![](assets/puzzle-1.png){height=\"95%\"}\n\n## Renv is only one piece of the reproducibility puzzle\n\n![](assets/puzzle-2.png){height=\"95%\"}\n\n## Renv is only one piece of the reproducibility puzzle\n\n![](assets/puzzle-3.png){height=\"95%\"}\n\n## Renv is only one piece of the reproducibility puzzle\n\n![](assets/puzzle-4.png){height=\"95%\"}\n\n## Renv is only one piece of the reproducibility puzzle\n\n![](assets/puzzle-5.png){height=\"95%\"}\n\n![](assets/external.jpg)\n\n## Recap\n\n::: {.columns}\n::: {.column width=\"40%\"}\n\n**Key functions**\n\n```\nrenv::init()\nrenv::snapshot()\nrenv::restore()\n```\n\n**Useful**\n\n```\nrenv::status()\nrenv::dependencies()\nrenv::history()\nrenv::revert()\n```\n\n:::\n::: {.column width=\"60%\"}\n\n![](assets/overview.png)\n\n:::\n:::\n\n## Acknowledgements\n\n::: {.columns}\n::: {.column}\n\n\n\n\n{{< video https://www.youtube.com/watch?v=yjlEbIDevOs width=\"100%\" height=\"400px\" >}}  \n\n\n\n\n\n**Project environments for R**, Kevin Ushey, RStudio::Conf 2020\n\n:::\n::: {.column}\n\n\n\n\n{{< video https://www.youtube.com/watch?v=7lCOjGrwclQ width=\"100%\" height=\"400px\" >}}  \n\n\n\n\n\n**Reproducible environments with renv**, Ryan Johnson, NHS-R community 2023\n\n:::\n:::\n\nrenv official [documentation](https://rstudio.github.io/renv/index.html)\n\n## {background-image=\"/assets/images/cover.webp\"}\n\n::: {.v-center .center}\n::: {}\n\n[Thank you!]{.largest}\n\n[Questions?]{.larger}\n\n[{{< meta current_year >}} • [SciLifeLab](https://www.scilifelab.se/) • [NBIS](https://nbis.se/) • [RaukR](https://nbisweden.github.io/raukr-2025)]{.smaller}\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}